# -*- coding: utf-8 -*-
"""PARCOURSUP_DATA_ANALYSE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CaLyq1azazLa3682fGXkIn8g3O-qlqdO

# **Pr√©ambule üìú** 

>Je suis Erwan Coubret, actuellement √©l√®ve de MP2I qui aime bien jouer avec les donn√©es. Alors j'ai r√©cup√©r√© celles de parcoursup et j'ai fait ce notebook pour permettre √† tout le monde d'y jeter un coup d'≈ìil facilement. Normalement j'ai fait en sorte que ce qui est mis est compr√©hensible et facilement modifiable pour qui le veut, √† condition d'avoir 2/3 connaissances en python.
> <br/><br/>
> Voil√†, pas de soucis de copyright, faites en ce que vous voulez. Si vous avez un probl√®me, vous pouvez me contacter sur twitter : https://twitter.com/ErwanCoubret.

****

## **Pas de pr√©requis üòä**
>Vous √™tes sur un notebook Colaboratory, une adaptation de Jupyter √† la sauce Google pour les connaisseurs. Il s'agit d'un service tr√®s pratique, utilisant les serveurs de Google pour faire tourner vos scripts (pas mal si vous avez une petite machine o√π √™tes en d√©placement). Si jamais vous gal√©rez vraiment allez voir le [tutoriel d'introduction √† Colaboratory](https://colab.research.google.com/notebooks/intro.ipynb#scrollTo=GJBs_flRovLc).

**Normalement la base de donn√©es est t√©l√©charg√©e automatiquement.** Mais si jamais il y a un probl√®me, voici la proc√©dure  :

**1.**   Rendez vous sur cette URL : https://data.enseignementsup-recherche.gouv.fr/explore/dataset/fr-esr-parcoursup/export/ et t√©l√©chargez le .csv (cela peut aussi servir si vous voulez jouer avec les donn√©es de votre c√¥t√©)<br/>
**2.**   Cliquez ensuite sur l'icone fichier sur la barre de gauche et importez le .csv, soit en le glissant dans la zone, ou manuellement<br/>
**3.**   Et voil√† c'est fini. **(Par contre attention il faudra le remettre si jamais vous quittez la page)**
****

## **Librairies utilis√©es üìö**

* **üêº Pandas** : Librairie pour transformer vos datasets en "dataframe", un outil puissant pour manipuler des donn√©es.

* **üìä Plotly** : Librairie pour visualiser les donn√©es, de mani√®re plus propre que matplotlib, avec notamment une meilleure interaction avec le graphe... Bien qu'encore trop peu utilis√©e aujourd'hui, la techno est tr√®s puissante. Si vous voulez jeter un coup d'oeil aux capacit√©s je vous redirige vers ce tutoriel : https://github.com/antonin-lfv/Plotly_tutorial. Ici on utilisera **plotly.graph_objects**, mais d'autres versions existent, avec leurs propres avantages.


****

# **√Ä l'attaque ‚öîÔ∏è R√©cup√©ration des donn√©es üìà**

Import des librairies
"""

import pandas as pd
import plotly.graph_objects as go

"""Import de la base de donn√©e (√ßa peut prendre un peu de temps)"""

url = "https://data.enseignementsup-recherche.gouv.fr/explore/dataset/fr-esr-parcoursup/download/?format=csv&timezone=Europe/Berlin&lang=fr&use_labels_for_header=true&csv_separator=%3B" # Lien du dataset

df = pd.read_csv(url, sep=";") # les s√©parateurs peuvent √™tre diff√©rents selon les fichiers .csv, mais ici il y a des ',' dans les titres des colonnes, alors il faut bien pr√©ciser qu'on s√©pare les colonnes gr√¢ce aux ';'
print(f"Formations : {df.shape[0]}, Labels de classification : {df.shape[1]}") # Rapide visualisation de la taille du dataset import√©

"""Nettoyage des donn√©es pour ne garder que celles qui nous int√©ressent (ici la fili√®re)"""

fili√®re = "CPGE - MP2I" # Ici la fili√®re qu'on veut r√©cup√©rer pour la traiter, √ßa marche avec tout autre type de formations pr√©sentes dans la colonne "LIB_FOR_VOE_INS" du csv

df = df[df["LIB_FOR_VOE_INS"] == fili√®re] # Ici on r√©cup√®re uniquement les lignes correspondantes √† la formation
print(f"Formations de {fili√®re} r√©f√©renc√©es : {df.shape[0]}") # Taille du nouveau dataframe avec que la fili√®re choisie
df.head() # Permet d'afficher les 5 premi√®res lignes d'un dataframe, pour avoir une v√©rification de ce que l'on manipule

"""# **Visualisation üëÄ**

**Liste des Labels**

Premi√®rement, observons quels sont les diff√©rents moyens de classification avec leur index. Notons que leur index servira prochainement.
"""

for i in range(df.shape[1]):
  print(f"{i} : {df.columns[i]}")

"""**Localisation des formations üåç**

Attention, certaines formations n'apparaissent pas, de par l'absence de leurs coordonn√©es GPS
"""

GPSdf = df.dropna(subset=[df.columns[15]]) # On r√©cup√®re la colonne donnant acc√®s aux coordonn√©es GPS en √©liminant les formations qui ne la renseigne pas

ListLat = []
ListLong = []

for coordonn√©es in GPSdf[df.columns[15]] : # Les coordonn√©es r√©f√©renc√©es sont du type "LAT,LONG" donc on s√©pare tout √ßa et on le met dans des listes
    sep = coordonn√©es.find(',')
    ListLat.append(coordonn√©es[:sep])
    ListLong.append(coordonn√©es[sep+1:])

fig = go.Figure()

fig.add_scattermapbox( 
    lon = ListLong,
    lat = ListLat,
    text = GPSdf["√âtablissement"],
    marker = {'size': 15,
              'color': '#5582ff',
              'opacity' : .7
})

fig.update_layout(
    margin ={'l':0,'t':0,'b':0,'r':10}, # marge left, top, bottom, right
    mapbox = {
        'center': {'lon': 3, 'lat': 47},
        'style': "open-street-map",
        'zoom': 4.5})
        
fig.show()

"""## **Quelques exemples**

> La partie la plus int√©ressante : voir les donn√©es en action. On utilise ici **plotly**, pour les raisons pr√©sent√©es plus t√¥t. Cependant je me permets de d√©tailler un peu l'interaction avec la figure (le graphe) :

* **Vous pouvez s√©lectionner les axes que vous souhaitez afficher** en cliquant sur le nom des axes dans la l√©gende. Pour en isoler un en particulier, double-cliquez dessus. Pour tout r√©afficher, double-cliquez de nouveau et hop. 
* Ensuite, directement sur le graphe, **vous pouvez s√©lectionner √† la souris directement la zone √† afficher**
* Et **pour enregistrer**, vous avez en haut √† droite un petit menu avec tout √† gauche un appareil photo. Un clic et vous pouvez enregistrer

### **Graphes g√©n√©raux √† la fili√®re**
"""

colonnes_√†_afficher = [17,44] # Colonnes relatives aux effectifs des cadidats ayant demand√© la fili√®re (17) et ceux qui ont re√ßus une proposition de l'√©tablissement (44)

labels = [df.columns[i] for i in colonnes_√†_afficher] # On r√©cup√®re la liste des labels pour la l√©gende
values = [df[df.columns[i]].mean(axis = 0) for i in colonnes_√†_afficher] # On fait la moyenne pour toute la formation

values[0] = values[0] - values[1] # Pour √©liminer les candidats d√©j√† comptabilis√©s

fig = go.Figure(data=[go.Pie(labels=labels, 
                             values=values,
                             hole=.4
)])

fig.update_layout(title=f"% de candidats ayant re√ßu une proposition d'admission en {fili√®re}") # Titre de la figure

fig.show()

colonnes_√†_afficher = [44,45] # Colonnes relatives aux effectifs des candidats ayant re√ßu une proposition d'admission (44) et ceux ayant accept√© celle-ci (45)

labels = [df.columns[i] for i in colonnes_√†_afficher]
values = [df[df.columns[i]].mean(axis = 0) for i in colonnes_√†_afficher]

values[0] = values[0] - values[1] # Pour √©liminer les candidats d√©j√† comptabilis√©s

fig = go.Figure(data=[go.Pie(labels=labels, 
                             values=values,
                             hole=.4
)])

fig.update_layout(title=f"% des gens acceptant la proposition d'admission de l'√©tablissement en {fili√®re}")

fig.show()

colonnes_√†_afficher = [81,82,83,84,85,86] # Colonnes relatives au pourcentage des mentions

labels = [df.columns[i] for i in colonnes_√†_afficher]
values = [df[df.columns[i]].mean(axis = 0) for i in colonnes_√†_afficher]

fig = go.Figure(data=[go.Pie(labels=labels, 
                             values=values,
                             hole=.4
)])

fig.update_layout(title=f"% correspondant aux mentions obtenues au bac par les admis en {fili√®re}")

fig.show()

colonnes_√†_afficher = [17,18] # Colonnes relatives aux effectifs totaux des candidats (17) et des candidates (18)

labels = [df.columns[i] for i in colonnes_√†_afficher]
values = [df[df.columns[i]].mean(axis = 0) for i in colonnes_√†_afficher]

values[0] = values[0] - values[1]

fig = go.Figure(data=[go.Pie(labels=labels, 
                             values=values,
                             hole=.4
)])

fig.update_layout(title=f"Proportion des candidats/candidates en {fili√®re}")

fig.show()

colonnes_√†_afficher = [45,46] # Colonnes relatives au pourcentage des mentions

labels = [df.columns[i] for i in colonnes_√†_afficher]
values = [df[df.columns[i]].mean(axis = 0) for i in colonnes_√†_afficher]

values[0] = values[0] - values[1]

fig = go.Figure(data=[go.Pie(labels=labels, 
                             values=values,
                             hole=.4
)])

fig.update_layout(title=f"Proportion des admis/admises ayant accept√© la proposition de l'√©tablissement {fili√®re}")

fig.show()

"""**NB pour la MP2I (mais peut s√ªrement s'√©tendre aux autres fili√®res) :** on observe ici une l√©g√®re diff√©rence entre le rapport des effectifs calcul√©s, et le % report√© ligne 75 vis-√†-vis du pourcentage d'admises (affich√© dans la cellule suivante : 11,83% d'admises contre 11,4% plus haut). Il faut donc se questionner un peu sur les donn√©es, et lui accorder une certaine incertitude, peut-√™tre due √† des d√©sistements, des erreurs administratives... """

df[df.columns[75]].mean(axis = 0)

"""### **Graphes particuliers aux √©tablissements**"""

colonne_√†_afficher = [17, 20] # On met ici les index des donn√©es que l'on souhaite afficher dans la liste, ici le nombre de demandes sans/avec internat correspondent aux index 17 et 20

fig = go.Figure() # Cr√©ation de la figure avec plotly

for i in colonne_√†_afficher:
  fig.add_trace( # Ajout d'un nouvel axe
      go.Bar( # Ici Bar pour cr√©er un histogramme 
          x = df["√âtablissement"], # on affiche selon le lyc√©e en abscisse
          y = df[df.columns[i]], # et la colonne choisie pr√©c√©demment dans colonne_√†_afficher
          name = df.columns[i] # Nom pour la l√©gende
      )
)

fig.update_layout(title="Nombre de demandes totales/dont internat", # Titre pour la figure
                  xaxis={'categoryorder':'max descending'}) # Permet de trier de mani√®re d√©croissante selon la valeur maximale de l'axe

fig.show()

colonne_√†_afficher = [17, 101] # Index correspondant aux effectifs (17) et le rang du dernier appel√© (101)

fig = go.Figure()

for i in colonne_√†_afficher:
  fig.add_trace(
      go.Bar(
          x = df["√âtablissement"],
          y = df[df.columns[i]],
          name = df.columns[i]
      )
)

fig.update_layout(title="Comparatif entre le nombre de demandes et le rang du dernier appel√©",
                  xaxis={'categoryorder':'max descending'}
)

fig.show()

colonne_√†_afficher = 75 # Ligne correspondant √† la proportion de filles par formations

fig = go.Figure()

fig.add_trace(
    go.Bar(
        x = df["√âtablissement"],
        y = df[df.columns[colonne_√†_afficher]],
        name = df.columns[colonne_√†_afficher],
    ) 
)
    
fig.add_trace(
    go.Bar(
        x = df["√âtablissement"],
        y = (100 - df[df.columns[75]]), # Comme on a acc√®s qu'au pourcentage de filles
        name = "% d‚Äôadmis dont gar√ßons",
    ) 
)

fig.update_layout(title="Proportion Filles/Gar√ßons (%)",
                  barmode='stack'
)

fig.show()

colonnes_√†_afficher = [85,81,82,83,84,86] # Colonnes relatives au pourcentage des mentions

fig = go.Figure()
for i in colonnes_√†_afficher:
  fig.add_trace(
      go.Bar(
          x = df["√âtablissement"],
          y = df[df.columns[i]],
          name = df.columns[i],
      )
)
  
fig.update_layout(title="Proportion des mentions obtenues par les admis",
                  barmode='stack',
                  xaxis={'categoryorder':''}
)

fig.show()

"""# **√Ä vous de jouer ! ‚úåÔ∏è**

> Avec les quelques exemples pr√©sent√©s pr√©c√©demment, vous devriez pouvoir vous amuser comme vous voulez en modifiant le code propos√©.
> 
> J'essaierai l'an prochain de faire d'ajouter des graphes en r√©cup√©rant les donn√©es sur plusieurs ann√©es.
"""